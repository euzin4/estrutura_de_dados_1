1)Implemente um programa, para alocar memória para um 
vetor. O número de posições do vetor será indicado via 
teclado, assim como o conteúdo das posições. Após a 
atribuição de valores às posições do vetor, o programa 
deve imprimir(na tela) as posições e seus conteúdos.

2) Altere o programa para armazenar uma estrutura em 
cada posição do vetor.
typedef struct{
char nome[50];
char endereco[100];
int matricula;
} estudante;

3. Altere o programa do exercício 1, de forma que receba números inteiros do usuário
indefinidamente. O programa finaliza quando o usuário entrar com o número 0.
a) Aloque, inicialmente, memória para 5 inteiros;
b) Caso o usuário entrar com mais inteiros, faça a realocação, alocando espaço para mais 5
inteiros e assim sucessivamente;

4. Crie uma função que receba como parâmetros dois vetores de inteiros, v1 e v2, e as suas
respectivas quantidades de elementos, n1 e n2. A função deverá retornar um ponteiro para
um terceiro vetor, v3, com capacidade para (n1 + n2) elementos, alocado dinamicamente,
contendo a união de v1 e v2.
Por exemplo, se v1 = {11, 13, 45, 7} e v2 = {24, 4, 16, 81, 10, 12}, v3 irá conter {11, 13,
45, 7, 24, 4, 16, 81, 10, 12}.
O cabeçalho dessa função deverá ser o seguinte:
int* uniao(int *v1, int n1, int *v2, int n2);
Em seguida, crie a função principal do programa para chamar a função união passando dois
vetores informados pelo usuário (ou declarados estaticamente). Em seguida, o programa
deve exibir na tela os elementos do vetor resultante. Não esqueça de liberar a memória
alocada dinamicamente.

RESPOSTAS:
exercicio 1

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int *x,val,i;
    scanf("%d", &val);
    x =(int *) malloc(sizeof(int) * val);
    if (!x)
    {
        printf ("ERRO: memoria insuficiente");
        exit;
    }
    for(i=0; i<val; i++)
        scanf("%d",&x[i]);

    for(i=0; i<val; i++)
        printf("\n%d",x[i]);
}


exercicio 2

#include <stdio.h>
#include <stdlib.h>

typedef struct
{
    char nome[50];
    char endereco[100];
    int matricula;
} estudante;

int main()
{
    int val,i;
    estudante *x;
    scanf("%d", &val);
    x =(estudante *) malloc(sizeof(int) * val);
    if (!x)
    {
        printf ("ERRO: memoria insuficiente");
        exit;
    }
    for(i=0; i<val; i++){
        scanf("%s",&x[i].nome);
        scanf("%s",&x[i].endereco);
        scanf("%d",&x[i].matricula);
    }
    for(i=0; i<val; i++){
        printf("\n\n%s",x[i].nome);
        printf("\n%s",x[i].endereco);
        printf("\n%d",x[i].matricula);
    }
}

exercicio 3:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int *x,i=0,a,j;
    x = (int*) calloc(5,sizeof(int));
    if (!x){
        printf ("ERRO: memoria insuficiente");
        exit;
    }
    do{
        if ((i)%5==0 && i!=0){
            int *xnew=realloc(x,(i+5)*sizeof(int));
            if(xnew){
                x=xnew;
                printf("memoria realocada\n");
            }
            else{
                printf("memoria insuficiente\n");
                return 0;
            }
        }
        scanf("%d",(x+i));
        a=*(x+i);
        i++;
    }while(a!=0);
    for(j=0;j<i;j++){
        printf("\n%d",*(x+j));
    }
}

exercicio 4:

#include <stdio.h>
#include <stdlib.h>

int main()
{
    int *v1,n1=0,n12=0,aux;
    int *v2,n2=0,n22=0,aux1;
//--------------------------------------------------- v1
    printf("digite v1\n");
    v1 = (int*) calloc(5,sizeof(int));
    if (!v1){
        printf ("ERRO: memoria insuficiente");
        exit;
    }
    do{
        if ((n1)%5==0 && n1!=0){
            int *v1new=realloc(v1,(n1+5)*sizeof(int));
            if(v1new){
                v1=v1new;
                printf("memoria realocada\n");
            }
            else{
                printf("memoria insuficiente\n");
                return 0;
            }
        }
        scanf("%d",(v1+n1));
        aux=*(v1+n1);
        n1++;
    }while(aux!=0);
    printf("DADOS DE v1:");
    for(n12=0;n12<n1;n12++){
        printf("\n%d",*(v1+n12));
    }
    printf("\n\ndigite v2\n");
//--------------------------------------------------- v2
    v2 = (int*) calloc(5,sizeof(int));
    if (!v2){
        printf ("ERRO: memoria insuficiente");
        exit;
    }
    do{
        if ((n2)%5==0 && n2!=0){
            int *v2new=realloc(v2,(n2+5)*sizeof(int));
            if(v2new){
                v2=v2new;
                printf("memoria realocada\n");
            }
            else{
                printf("memoria insuficiente\n");
                return 0;
            }
        }
        scanf("%d",(v2+n2));
        aux1=*(v2+n2);
        n2++;
    }while(aux1!=0);
    printf("DADOS DE v2:");
    for(n22=0;n22<n2;n22++){
        printf("\n%d",*(v2+n22));
    }
    printf("\n");
//--------------------------------------------------- v3
    v3 = (int*) calloc(5,sizeof(int));
    if (!v3){
        printf ("ERRO: memoria insuficiente");
        exit;
    }
    do{
        if ((n3)%5==0 && n3!=0){
            int *v3new=realloc(v3,(n3+5)*sizeof(int));
            if(v3new){
                v3=v3new;
            }
            else{
                printf("memoria insuficiente\n");
                return 0;
            }
        }
    }while(aux2!=0);
    printf("DADOS DE v2:");
    for(n32=0;n32<n3;n32++){
        printf("\n%d",*(v3+n32));
    }
    printf("\n");
}
